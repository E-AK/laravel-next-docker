version: '3.8'

services:
  nginx:
    build:
      context: ./
      dockerfile: ./docker/nginx/Dockerfile
    restart: ${DOCKER_RESTART}
    volumes:
      - ./docker/nginx/etc/conf.d:/etc/nginx/conf.d:ro
      - ./api:/var/www/app
    ports:
      - "80:80"
      - "8080:8080"
    depends_on:
      - frontend
      - api

  api:
    build:
      context: ./
      dockerfile: ./docker/api/dev.Dockerfile
    restart: ${DOCKER_RESTART}
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - ./api:/var/www/app

  frontend:
    build:
      context: ./
      dockerfile: ./docker/frontend/dev.Dockerfile
    restart: ${DOCKER_RESTART}
    stdin_open: true
    tty: true
    volumes:
      - ./frontend/node_modules:/app/node_modules
      - ./frontend/.next:/app/.next
      - ./frontend:/app

  postgres:
    image: postgres:17.0-alpine3.20
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./docker/postgres/var/lib/postgresql:/var/lib/postgresql

  rabbitmq:
    image: rabbitmq:4.0.4-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  mailhog:
    container_name: mailhog
    restart: ${DOCKER_RESTART}
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"
      - "1025:1025"