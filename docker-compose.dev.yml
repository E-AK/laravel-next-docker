services:
  nginx:
    build:
      context: ./
      dockerfile: ./docker/nginx/Dockerfile
    restart: ${DOCKER_RESTART}
    volumes:
      - ./docker/nginx/etc/conf.d:/etc/nginx/conf.d:ro
      - ./api:/var/www/app
    ports:
      - "80:80"
      - "8080:8080"
    depends_on:
      - frontend
      - api

  api:
    build:
      context: ./
      dockerfile: ./docker/api/dev.Dockerfile
      args:
        APP_SOURCE: api
    restart: ${DOCKER_RESTART}
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - ./api:/var/www/app

  user_service:
    build:
      context: ./
      dockerfile: ./docker/user_service/dev.Dockerfile
    restart: ${DOCKER_RESTART}
#    depends_on:
#      - pgpool
#      - rabbitmq
    volumes:
      - ./user_service:/var/www/app

  task_service:
    build:
      context: ./
      dockerfile: ./docker/api/dev.Dockerfile
      args:
        APP_SOURCE: task_service
    restart: ${DOCKER_RESTART}
    depends_on:
      - pgpool
      - rabbitmq
    volumes:
      - ./task_service:/var/www/app

  notification_service:
    build:
      context: ./
      dockerfile: ./docker/api/dev.Dockerfile
      args:
        APP_SOURCE: notification_service
    restart: ${DOCKER_RESTART}
    depends_on:
      - pgpool
      - rabbitmq
    volumes:
      - ./notification_service:/var/www/app

  frontend:
    build:
      context: ./
      dockerfile: ./docker/frontend/dev.Dockerfile
    restart: ${DOCKER_RESTART}
    stdin_open: true
    tty: true
    volumes:
      - ./frontend/node_modules:/app/node_modules
      - ./frontend/.next:/app/.next
      - ./frontend:/app

  postgres:
    image: postgres:17.0-alpine3.20
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./docker/postgres/var/lib/postgresql:/var/lib/postgresql

  postgres_user_service:
    image: postgres:17.0-alpine3.20
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB_USER_SERVICE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./docker/postgres_user_service/var/lib/postgresql:/var/lib/postgresql

  postgres_task_service:
    image: postgres:17.0-alpine3.20
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB_TASK_SERVICE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./docker/postgres_task_service/var/lib/postgresql:/var/lib/postgresql

  postgres_notification_service:
    image: postgres:17.0-alpine3.20
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NOTIFICATION_SERVICE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./docker/postgres_notification_service/var/lib/postgresql:/var/lib/postgresql

  pgpool:
    image: bitnami/pgpool:4.5.5
    ports:
      - 5432:5432
    environment:
      PGPOOL_BACKEND_NODES: 0:postgres_user_service:5432,1:postgres_task_service:5432,2:postgres_notification_service:5432
      PGPOOL_SR_CHECK_USER: ${POSTGRES_USER}
      PGPOOL_SR_CHECK_PASSWORD: ${POSTGRES_PASSWORD}
      PGPOOL_ENABLE_LDAP: no
      PGPOOL_POSTGRES_USERNAME: ${POSTGRES_USER}
      PGPOOL_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPOOL_ADMIN_USERNAME: admin
      PGPOOL_ADMIN_PASSWORD: adminpassword
    depends_on:
      - postgres_user_service
      - postgres_task_service
      - postgres_notification_service
    healthcheck:
      test: [ "CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.0.4-management-alpine
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  mailhog:
    container_name: mailhog
    restart: ${DOCKER_RESTART}
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"
      - "1025:1025"

  telegraf:
    image: telegraf:1.31.3-alpine
    restart: ${DOCKER_RESTART}
    environment:
      INFLUX_HOST: ${INFLUX_HOST}
      INFLUXDB_DB: ${INFLUXDB_DB}
      INFLUXDB_ADMIN_USER: ${INFLUXDB_ADMIN_USER}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_ADMIN_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb

  influxdb:
    image: influxdb:1.11.8-alpine
    restart: ${DOCKER_RESTART}
    environment:
      INFLUXDB_DB: ${INFLUXDB_DB}
      INFLUXDB_ADMIN_USER: ${INFLUXDB_ADMIN_USER}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
    volumes:
      - ./influxdb/data:/var/lib/influxdb
      - ./influxdb/config:/etc/influxdb

  grafana:
    image: grafana/grafana-enterprise
    restart: ${DOCKER_RESTART}
    ports:
      - '3000:3000'
    volumes:
      - ./grafana/var/lib/grafana:/var/lib/grafana
      - ./grafana/usr/share/grafana/conf/provisioning/datasources:/usr/share/grafana/conf/provisioning/datasources